// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Relationship is an object representing the database table.
type Relationship struct {
	ID         string `boil:"id" json:"id" toml:"id" yaml:"id"`
	FollowerID string `boil:"follower_id" json:"follower_id" toml:"follower_id" yaml:"follower_id"`
	FolloweeID string `boil:"followee_id" json:"followee_id" toml:"followee_id" yaml:"followee_id"`

	R *relationshipR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L relationshipL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RelationshipColumns = struct {
	ID         string
	FollowerID string
	FolloweeID string
}{
	ID:         "id",
	FollowerID: "follower_id",
	FolloweeID: "followee_id",
}

// Generated where

var RelationshipWhere = struct {
	ID         whereHelperstring
	FollowerID whereHelperstring
	FolloweeID whereHelperstring
}{
	ID:         whereHelperstring{field: "\"relationships\".\"id\""},
	FollowerID: whereHelperstring{field: "\"relationships\".\"follower_id\""},
	FolloweeID: whereHelperstring{field: "\"relationships\".\"followee_id\""},
}

// RelationshipRels is where relationship names are stored.
var RelationshipRels = struct {
	Followee string
	Follower string
}{
	Followee: "Followee",
	Follower: "Follower",
}

// relationshipR is where relationships are stored.
type relationshipR struct {
	Followee *Account
	Follower *Account
}

// NewStruct creates a new relationship struct
func (*relationshipR) NewStruct() *relationshipR {
	return &relationshipR{}
}

// relationshipL is where Load methods for each relationship are stored.
type relationshipL struct{}

var (
	relationshipAllColumns            = []string{"id", "follower_id", "followee_id"}
	relationshipColumnsWithoutDefault = []string{"id", "follower_id", "followee_id"}
	relationshipColumnsWithDefault    = []string{}
	relationshipPrimaryKeyColumns     = []string{"id"}
)

type (
	// RelationshipSlice is an alias for a slice of pointers to Relationship.
	// This should generally be used opposed to []Relationship.
	RelationshipSlice []*Relationship
	// RelationshipHook is the signature for custom Relationship hook methods
	RelationshipHook func(context.Context, boil.ContextExecutor, *Relationship) error

	relationshipQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	relationshipType                 = reflect.TypeOf(&Relationship{})
	relationshipMapping              = queries.MakeStructMapping(relationshipType)
	relationshipPrimaryKeyMapping, _ = queries.BindMapping(relationshipType, relationshipMapping, relationshipPrimaryKeyColumns)
	relationshipInsertCacheMut       sync.RWMutex
	relationshipInsertCache          = make(map[string]insertCache)
	relationshipUpdateCacheMut       sync.RWMutex
	relationshipUpdateCache          = make(map[string]updateCache)
	relationshipUpsertCacheMut       sync.RWMutex
	relationshipUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var relationshipBeforeInsertHooks []RelationshipHook
var relationshipBeforeUpdateHooks []RelationshipHook
var relationshipBeforeDeleteHooks []RelationshipHook
var relationshipBeforeUpsertHooks []RelationshipHook

var relationshipAfterInsertHooks []RelationshipHook
var relationshipAfterSelectHooks []RelationshipHook
var relationshipAfterUpdateHooks []RelationshipHook
var relationshipAfterDeleteHooks []RelationshipHook
var relationshipAfterUpsertHooks []RelationshipHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Relationship) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationshipBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Relationship) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationshipBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Relationship) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationshipBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Relationship) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationshipBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Relationship) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationshipAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Relationship) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationshipAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Relationship) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationshipAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Relationship) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationshipAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Relationship) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationshipAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRelationshipHook registers your hook function for all future operations.
func AddRelationshipHook(hookPoint boil.HookPoint, relationshipHook RelationshipHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		relationshipBeforeInsertHooks = append(relationshipBeforeInsertHooks, relationshipHook)
	case boil.BeforeUpdateHook:
		relationshipBeforeUpdateHooks = append(relationshipBeforeUpdateHooks, relationshipHook)
	case boil.BeforeDeleteHook:
		relationshipBeforeDeleteHooks = append(relationshipBeforeDeleteHooks, relationshipHook)
	case boil.BeforeUpsertHook:
		relationshipBeforeUpsertHooks = append(relationshipBeforeUpsertHooks, relationshipHook)
	case boil.AfterInsertHook:
		relationshipAfterInsertHooks = append(relationshipAfterInsertHooks, relationshipHook)
	case boil.AfterSelectHook:
		relationshipAfterSelectHooks = append(relationshipAfterSelectHooks, relationshipHook)
	case boil.AfterUpdateHook:
		relationshipAfterUpdateHooks = append(relationshipAfterUpdateHooks, relationshipHook)
	case boil.AfterDeleteHook:
		relationshipAfterDeleteHooks = append(relationshipAfterDeleteHooks, relationshipHook)
	case boil.AfterUpsertHook:
		relationshipAfterUpsertHooks = append(relationshipAfterUpsertHooks, relationshipHook)
	}
}

// One returns a single relationship record from the query.
func (q relationshipQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Relationship, error) {
	o := &Relationship{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for relationships")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Relationship records from the query.
func (q relationshipQuery) All(ctx context.Context, exec boil.ContextExecutor) (RelationshipSlice, error) {
	var o []*Relationship

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to Relationship slice")
	}

	if len(relationshipAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Relationship records in the query.
func (q relationshipQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count relationships rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q relationshipQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if relationships exists")
	}

	return count > 0, nil
}

// Followee pointed to by the foreign key.
func (o *Relationship) Followee(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FolloweeID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "\"accounts\"")

	return query
}

// Follower pointed to by the foreign key.
func (o *Relationship) Follower(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FollowerID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "\"accounts\"")

	return query
}

// LoadFollowee allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (relationshipL) LoadFollowee(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRelationship interface{}, mods queries.Applicator) error {
	var slice []*Relationship
	var object *Relationship

	if singular {
		object = maybeRelationship.(*Relationship)
	} else {
		slice = *maybeRelationship.(*[]*Relationship)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &relationshipR{}
		}
		args = append(args, object.FolloweeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &relationshipR{}
			}

			for _, a := range args {
				if a == obj.FolloweeID {
					continue Outer
				}
			}

			args = append(args, obj.FolloweeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`accounts`), qm.WhereIn(`accounts.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for accounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for accounts")
	}

	if len(relationshipAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Followee = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.FolloweeRelationships = append(foreign.R.FolloweeRelationships, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FolloweeID == foreign.ID {
				local.R.Followee = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.FolloweeRelationships = append(foreign.R.FolloweeRelationships, local)
				break
			}
		}
	}

	return nil
}

// LoadFollower allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (relationshipL) LoadFollower(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRelationship interface{}, mods queries.Applicator) error {
	var slice []*Relationship
	var object *Relationship

	if singular {
		object = maybeRelationship.(*Relationship)
	} else {
		slice = *maybeRelationship.(*[]*Relationship)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &relationshipR{}
		}
		args = append(args, object.FollowerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &relationshipR{}
			}

			for _, a := range args {
				if a == obj.FollowerID {
					continue Outer
				}
			}

			args = append(args, obj.FollowerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`accounts`), qm.WhereIn(`accounts.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for accounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for accounts")
	}

	if len(relationshipAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Follower = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.FollowerRelationships = append(foreign.R.FollowerRelationships, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FollowerID == foreign.ID {
				local.R.Follower = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.FollowerRelationships = append(foreign.R.FollowerRelationships, local)
				break
			}
		}
	}

	return nil
}

// SetFollowee of the relationship to the related item.
// Sets o.R.Followee to related.
// Adds o to related.R.FolloweeRelationships.
func (o *Relationship) SetFollowee(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"relationships\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"followee_id"}),
		strmangle.WhereClause("\"", "\"", 2, relationshipPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FolloweeID = related.ID
	if o.R == nil {
		o.R = &relationshipR{
			Followee: related,
		}
	} else {
		o.R.Followee = related
	}

	if related.R == nil {
		related.R = &accountR{
			FolloweeRelationships: RelationshipSlice{o},
		}
	} else {
		related.R.FolloweeRelationships = append(related.R.FolloweeRelationships, o)
	}

	return nil
}

// SetFollower of the relationship to the related item.
// Sets o.R.Follower to related.
// Adds o to related.R.FollowerRelationships.
func (o *Relationship) SetFollower(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"relationships\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"follower_id"}),
		strmangle.WhereClause("\"", "\"", 2, relationshipPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FollowerID = related.ID
	if o.R == nil {
		o.R = &relationshipR{
			Follower: related,
		}
	} else {
		o.R.Follower = related
	}

	if related.R == nil {
		related.R = &accountR{
			FollowerRelationships: RelationshipSlice{o},
		}
	} else {
		related.R.FollowerRelationships = append(related.R.FollowerRelationships, o)
	}

	return nil
}

// Relationships retrieves all the records using an executor.
func Relationships(mods ...qm.QueryMod) relationshipQuery {
	mods = append(mods, qm.From("\"relationships\""))
	return relationshipQuery{NewQuery(mods...)}
}

// FindRelationship retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRelationship(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Relationship, error) {
	relationshipObj := &Relationship{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"relationships\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, relationshipObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from relationships")
	}

	return relationshipObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Relationship) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no relationships provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(relationshipColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	relationshipInsertCacheMut.RLock()
	cache, cached := relationshipInsertCache[key]
	relationshipInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			relationshipAllColumns,
			relationshipColumnsWithDefault,
			relationshipColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(relationshipType, relationshipMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(relationshipType, relationshipMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"relationships\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"relationships\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into relationships")
	}

	if !cached {
		relationshipInsertCacheMut.Lock()
		relationshipInsertCache[key] = cache
		relationshipInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Relationship.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Relationship) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	relationshipUpdateCacheMut.RLock()
	cache, cached := relationshipUpdateCache[key]
	relationshipUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			relationshipAllColumns,
			relationshipPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update relationships, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"relationships\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, relationshipPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(relationshipType, relationshipMapping, append(wl, relationshipPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update relationships row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for relationships")
	}

	if !cached {
		relationshipUpdateCacheMut.Lock()
		relationshipUpdateCache[key] = cache
		relationshipUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q relationshipQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for relationships")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for relationships")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RelationshipSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), relationshipPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"relationships\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, relationshipPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in relationship slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all relationship")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Relationship) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no relationships provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(relationshipColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	relationshipUpsertCacheMut.RLock()
	cache, cached := relationshipUpsertCache[key]
	relationshipUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			relationshipAllColumns,
			relationshipColumnsWithDefault,
			relationshipColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			relationshipAllColumns,
			relationshipPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert relationships, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(relationshipPrimaryKeyColumns))
			copy(conflict, relationshipPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"relationships\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(relationshipType, relationshipMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(relationshipType, relationshipMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert relationships")
	}

	if !cached {
		relationshipUpsertCacheMut.Lock()
		relationshipUpsertCache[key] = cache
		relationshipUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Relationship record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Relationship) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no Relationship provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), relationshipPrimaryKeyMapping)
	sql := "DELETE FROM \"relationships\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from relationships")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for relationships")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q relationshipQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no relationshipQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from relationships")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for relationships")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RelationshipSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(relationshipBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), relationshipPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"relationships\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, relationshipPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from relationship slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for relationships")
	}

	if len(relationshipAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Relationship) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRelationship(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RelationshipSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RelationshipSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), relationshipPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"relationships\".* FROM \"relationships\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, relationshipPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in RelationshipSlice")
	}

	*o = slice

	return nil
}

// RelationshipExists checks if the Relationship row exists.
func RelationshipExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"relationships\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if relationships exists")
	}

	return exists, nil
}
